import React, { useState, useEffect, useCallback } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { VoiceChatInterface } from "../components/chat/VoiceChatInterface";
import { sessionsService } from "../services/api/sessions";
import { audioService } from "../services/audio/audioService";
import { Button } from "../components/ui/Button";
import { ApiKeyAlert } from "../components/chat/ApiKeyAlert";
import { useSettings } from "../hooks/useSettings";
import { useAuth } from "../services/auth/useAuth";
import { aiService } from "../services/ai/aiService";
import { cleanTextForSpeech, createVoiceText } from "../utils/textCleaner";
import { ScenariosService } from "../services/supabase/scenarios";

// Interfaces locales pour √©viter les probl√®mes d'export
interface Message {
  id: string;
  sessionId: string;
  content: string;
  speaker: "user" | "ai";
  timestamp: Date;
  audioUrl?: string;
  isSpoken?: boolean;
  isSpeaking?: boolean;
  metadata?: {
    sentiment?: number;
    confidence?: number;
    duration?: number;
  };
}

interface Session {
  id: string;
  userId: string;
  scenarioId: string;
  status: "pending" | "active" | "completed" | "abandoned";
  startTime: Date;
  endTime?: Date;
  duration?: number;
  audioRecordingUrl?: string;
  transcript: Message[];
  evaluation?: SessionEvaluation;
  createdAt: Date;
}

interface SessionEvaluation {
  id: string;
  sessionId: string;
  overallScore: number;
  criteriaScores: CriteriaScore[];
  strengths: string[];
  improvements: string[];
  suggestions: string[];
  feedback: string;
  createdAt: Date;
}

interface CriteriaScore {
  criteriaId: string;
  score: number;
  details: string;
}

interface ScenarioData {
  id: string;
  title: string;
  contexte: string;
  miseEnSituation: string;
  questionsTypiques: string;
  objectifs: string;
  difficulte: "Facile" | "Moyen" | "Difficile";
  dureeEstimee: string;
}

export const SessionPage: React.FC = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const navigate = useNavigate();
  const { settings } = useSettings();
  const { user } = useAuth();

  const [session, setSession] = useState<Session | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [isRecording, setIsRecording] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showScenarioBriefing, setShowScenarioBriefing] = useState(false);
  const [scenariosData, setScenariosData] = useState<Record<string, ScenarioData>>({});

  // V√©rifier si la cl√© API est configur√©e (priorit√© au profil utilisateur, sinon settings locaux)
  const userApiKey = user?.openai_api_key;
  const localApiKey = settings.apiKey;
  const apiKey = userApiKey || localApiKey;
  const hasApiKey = apiKey && apiKey.trim().length > 0;

  // Debug log pour v√©rifier l'√©tat de la cl√© API
  console.log("üîë API Key Status:", {
    hasUserKey: !!userApiKey,
    hasLocalKey: !!localApiKey,
    userKeyLength: userApiKey?.length || 0,
    localKeyLength: localApiKey?.length || 0,
    hasApiKey,
    apiKeyLength: apiKey?.length || 0,
    user: user?.email,
  });

  useEffect(() => {
    // Charger les donn√©es des sc√©narios au d√©marrage
    loadScenariosData();

    if (sessionId) {
      if (sessionId.startsWith("demo-")) {
        // Cr√©er une session de d√©monstration
        createDemoSession(sessionId);
      } else {
        fetchSession(sessionId);
      }
    }
  }, [sessionId, loadScenariosData]);

  // Configurer la cl√© API dans le service IA quand elle change
  useEffect(() => {
    if (apiKey) {
      aiService.setApiKey(apiKey);
    }
  }, [apiKey]);

  // Charger les donn√©es des sc√©narios depuis Supabase
  const loadScenariosData = useCallback(async () => {
    const data = await getScenariosData();
    setScenariosData(data);
  }, []);

  const createDemoSession = async (demoId: string) => {
    try {
      // Extraire l'ID du sc√©nario depuis l'ID de d√©monstration
      const scenarioId = demoId.replace("demo-", "");

      // Cr√©er une session de d√©monstration
      const demoSession: Session = {
        id: demoId,
        userId: "demo-user",
        scenarioId: `Sc√©nario ${scenarioId}`,
        status: "active",
        startTime: new Date(),
        transcript: [],
        createdAt: new Date(),
      };

      setSession(demoSession);

      // Ajouter un message de bienvenue (pas encore parl√©)
      const welcomeMessage: Message = {
        id: "welcome",
        sessionId: demoId,
        content:
          "Bienvenue dans votre session d'entra√Ænement ! Je suis votre IA et je vais vous guider √† travers ce sc√©nario. Pr√™t √† commencer ?",
        speaker: "ai",
        timestamp: new Date(),
        isSpoken: false,
        isSpeaking: false,
      };

      setMessages([welcomeMessage]);
    } catch (error) {
      console.error("Error creating demo session:", error);
      setError("Erreur lors de la cr√©ation de la session de d√©monstration");
    } finally {
      setLoading(false);
    }
  };

  const fetchSession = async (id: string) => {
    try {
      const response = await sessionsService.getSessionById(id);
      if (response.success && response.data) {
        setSession(response.data);
        setMessages(response.data.transcript || []);
      } else {
        setError("Session non trouv√©e");
      }
    } catch (error) {
      console.error("Error fetching session:", error);
      setError("Erreur lors du chargement de la session");
    } finally {
      setLoading(false);
    }
  };

  const handleStartRecording = async () => {
    try {
      await audioService.startRecording();
      setIsRecording(true);

      // Ajouter un message syst√®me
      const systemMessage: Message = {
        id: Date.now().toString(),
        sessionId: sessionId!,
        content: "üé§ Enregistrement en cours...",
        speaker: "ai",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, systemMessage]);
    } catch (error) {
      console.error("Error starting recording:", error);
      setError("Impossible de d√©marrer l'enregistrement");
    }
  };

  const handleTranscriptUpdate = (transcript: string, isFinal: boolean) => {
    console.log(
      "Transcription update:",
      transcript,
      isFinal ? "(final)" : "(interim)"
    );

    // Si l'IA √©tait en train de parler et l'utilisateur commence √† parler,
    // mettre √† jour les messages pour indiquer l'interruption
    if (audioService.isSpeaking() && transcript.trim()) {
      setMessages((prev) =>
        prev.map((msg) =>
          msg.speaker === "ai" && msg.isSpeaking
            ? {
                ...msg,
                isSpeaking: false,
                isSpoken: false,
                content: msg.content + " [Interrompu]",
              }
            : msg
        )
      );
    }
  };

  const handleStopRecording = async () => {
    try {
      const audioBlob = await audioService.stopRecording();
      setIsRecording(false);

      // TODO: Envoyer l'audio au backend pour transcription
      console.log("Audio recorded:", audioBlob);

      // R√©ponse imm√©diate de l'IA pour une interaction plus rapide
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        sessionId: sessionId!,
        content:
          "Merci pour votre r√©ponse. Pouvez-vous me parler de votre exp√©rience avec React ?",
        speaker: "ai",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiResponse]);
    } catch (error) {
      console.error("Error stopping recording:", error);
      setError("Erreur lors de l'arr√™t de l'enregistrement");
    }
  };

  const handleSendMessage = async (content: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      sessionId: sessionId!,
      content,
      speaker: "user",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);

    // G√©n√©rer une r√©ponse de l'IA avec r√©ponse vocale imm√©diatement
    generateAIResponse(content);
  };

  const generateAIResponse = async (userMessage: string) => {
    // V√©rifier si la cl√© API est disponible
    if (!hasApiKey) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        sessionId: sessionId!,
        content:
          "Attention, impossible de g√©n√©rer une r√©ponse car aucune cl√© API n'est configur√©e. Veuillez configurer votre cl√© API dans les param√®tres pour pouvoir dialoguer avec l'IA.",
        speaker: "ai",
        timestamp: new Date(),
        isSpoken: false,
        isSpeaking: false,
      };
      setMessages((prev) => [...prev, errorMessage]);
      return;
    }

    try {
      // Pr√©parer l'historique de conversation pour l'IA
      const conversationHistory = messages.map((msg) => ({
        role:
          msg.speaker === "user" ? ("user" as const) : ("assistant" as const),
        content: msg.content,
      }));

      // Ajouter le nouveau message de l'utilisateur
      conversationHistory.push({
        role: "user" as const,
        content: userMessage,
      });

      // Ajouter un message "en cours de r√©flexion"
      const thinkingMessage: Message = {
        id: (Date.now() + 1).toString(),
        sessionId: sessionId!,
        content: "En r√©flexion...",
        speaker: "ai",
        timestamp: new Date(),
        isSpoken: false,
        isSpeaking: false,
      };
      setMessages((prev) => [...prev, thinkingMessage]);

      // Appeler le service IA
      const aiResponse = await aiService.generateResponse(conversationHistory, {
        temperature: 0.7,
        maxTokens: 500,
        systemPrompt: `Tu es un coach d'entretien professionnel. Tu aides les candidats √† am√©liorer leurs comp√©tences en simulation d'entretien. Sois encourageant, donne des feedbacks constructifs et pose des questions de suivi pertinentes. Tu simules un recruteur ou un manager qui √©value le candidat. R√©ponds en fran√ßais.

IMPORTANT : Ne mentionne jamais la difficult√© (facile, moyen, difficile) ni la dur√©e estim√©e de l'entretien dans tes r√©ponses. Concentre-toi uniquement sur le contenu, les comp√©tences et les feedbacks pertinents.`,
      });

      // Remplacer le message de r√©flexion par la vraie r√©ponse
      const aiMessage: Message = {
        id: (Date.now() + 2).toString(),
        sessionId: sessionId!,
        content: aiResponse.content,
        speaker: "ai",
        timestamp: new Date(),
        isSpeaking: true,
        isSpoken: false,
      };

      setMessages((prev) =>
        prev.map((msg) => (msg.id === thinkingMessage.id ? aiMessage : msg))
      );

      // Nettoyer le texte pour la synth√®se vocale (texte fluide sans emojis ni markdown)
      const cleanSpeechText = cleanTextForSpeech(aiResponse.content);

      console.log("ü§ñ AI Response - Original:", aiResponse.content);
      console.log("üé§ AI Response - Clean:", cleanSpeechText);

      // Lire la r√©ponse vocalement avec les param√®tres optimis√©s pour une voix naturelle
      await audioService.speakText(cleanSpeechText, {
        rate: 0.95, // Vitesse naturelle et non robotique
        pitch: 1.0, // Pitch neutre
        volume: settings.aiVoiceVolume || 0.9, // Volume l√©g√®rement plus √©lev√©
      });

      // Mettre √† jour le message une fois la lecture termin√©e
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === aiMessage.id
            ? { ...msg, isSpeaking: false, isSpoken: true }
            : msg
        )
      );
    } catch (error) {
      console.error("Error generating AI response:", error);

      // Message d'erreur
      const errorMessage: Message = {
        id: (Date.now() + 2).toString(),
        sessionId: sessionId!,
        content:
          "‚ùå D√©sol√©, je rencontre des difficult√©s techniques. Veuillez r√©essayer dans un instant.",
        speaker: "ai",
        timestamp: new Date(),
        isSpoken: false,
        isSpeaking: false,
      };

      // Remplacer le message de r√©flexion par le message d'erreur
      setMessages((prev) =>
        prev.map((msg) =>
          msg.content.includes("En r√©flexion...") ? errorMessage : msg
        )
      );
    }
  };

  const handleOpenSettings = () => {
    // Naviguer vers la page des param√®tres ou ouvrir une modal
    navigate("/settings");
  };

  // R√©cup√©rer les donn√©es des sc√©narios depuis Supabase
  const getScenariosData = async (): Promise<Record<string, ScenarioData>> => {
    const { data, error } = await ScenariosService.getScenarios();

    if (error || !data) {
      console.error("Error fetching scenarios from Supabase:", error);
      return {};
    }

    // Convertir les donn√©es de Supabase au format attendu
    const scenariosRecord: Record<string, ScenarioData> = {};

    data.forEach((scenario) => {
      // Convertir la difficult√© du format Supabase vers le format d'affichage
      const difficulteDisplay = scenario.difficulty === 'beginner' ? 'Facile' :
                               scenario.difficulty === 'intermediate' ? 'Moyen' : 'Difficile';

      // Convertir la dur√©e en minutes vers une cha√Æne lisible
      const dureeEstimee = `${scenario.duration} minutes`;

      scenariosRecord[scenario.id] = {
        id: scenario.id,
        title: scenario.title,
        contexte: scenario.context || scenario.description,
        miseEnSituation: scenario.mise_en_situation || '',
        questionsTypiques: scenario.questions_typiques || '',
        objectifs: scenario.objectifs || '',
        difficulte: difficulteDisplay,
        dureeEstimee: dureeEstimee,
      };
    });

    return scenariosRecord;
  };

  // La fonction cleanTextForSpeech est maintenant import√©e depuis utils/textCleaner

  const handleStartScenarioBriefing = async () => {
    if (!session) return;

    setShowScenarioBriefing(true);

    // Extraire l'ID du sc√©nario depuis sessionId
    const scenarioId = session.id.replace("demo-", "");

    // R√©cup√©rer les donn√©es du sc√©nario depuis l'√©tat
    const scenarioData = scenariosData[scenarioId] || scenariosData["1"] || Object.values(scenariosData)[0]; // Multiple fallbacks

    console.log("üé≠ Scenario selected:", scenarioId, scenarioData);

    // Cr√©er le message de briefing du sc√©nario (avec formatage visuel)
    const briefingMessage: Message = {
      id: "scenario-briefing",
      sessionId: session.id,
      content: `Voici le sc√©nario d'entretien que nous allons simuler :

      Alors, vous avez allez avoir le contexte suivant : ${scenarioData.contexte}

      La mise en Situation : ${scenarioData.miseEnSituation}

      Les Questions typiques : ${scenarioData.questionsTypiques}
      Objectifs : ${scenarioData.objectifs}

      Nous allons commencer l'entretien quand vous serez pr√™t. N'h√©sitez pas √† poser des questions si vous avez besoin de clarifications avant de commencer.`,
      speaker: "ai",
      timestamp: new Date(),
      isSpeaking: true,
      isSpoken: false,
    };

    setMessages((prev) => [...prev, briefingMessage]);

    // Cr√©er une version du message pour la voix (sans difficult√© ni dur√©e)
    const voiceBriefingText = createVoiceText(briefingMessage.content);

    // Nettoyer le texte pour la synth√®se vocale (texte fluide)
    const cleanSpeechText = cleanTextForSpeech(voiceBriefingText);

    console.log(
      "üó£Ô∏è Original briefing text (display):",
      briefingMessage.content
    );
    console.log(
      "üé§ Voice briefing text (no diff/duration):",
      voiceBriefingText
    );
    console.log("üé§ Clean briefing text:", cleanSpeechText);

    // Lire le briefing vocalement avec du texte fluide
    try {
      await audioService.speakText(cleanSpeechText, {
        rate: 0.9, // Un peu plus lent pour le briefing mais naturel
        pitch: 1.0,
        volume: settings.aiVoiceVolume || 0.9,
      });

      // Marquer comme parl√© une fois termin√©
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === briefingMessage.id
            ? { ...msg, isSpeaking: false, isSpoken: true }
            : msg
        )
      );
    } catch (error) {
      console.error("Error speaking scenario briefing:", error);
      // Marquer comme parl√© m√™me en cas d'erreur
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === briefingMessage.id
            ? { ...msg, isSpeaking: false, isSpoken: true }
            : msg
        )
      );
    }
  };

  const handleEndSession = async () => {
    if (session && session.id) {
      try {
        if (session.id.startsWith("demo-")) {
          // Pour les sessions de d√©monstration, simplement naviguer
          navigate("/dashboard");
        } else {
          await sessionsService.endSession(session.id);
          navigate("/dashboard");
        }
      } catch (error) {
        console.error("Error ending session:", error);
        setError("Erreur lors de la fin de session");
      }
    } else {
      // Si pas de session ou session.id est undefined, naviguer quand m√™me
      navigate("/dashboard");
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-500">Chargement de la session...</p>
        </div>
      </div>
    );
  }

  if (error || !session) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-600 mb-4">{error || "Session non trouv√©e"}</p>
          <Button onClick={() => navigate("/dashboard")}>
            Retour au tableau de bord
          </Button>
        </div>
      </div>
    );
  }

  return (
    <>
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                {session.scenarioId} - Session en cours
              </h1>
              <div className="flex items-center space-x-4 mt-1">
                <p className="text-sm text-gray-500">
                  {isRecording
                    ? "üé§ Enregistrement en cours"
                    : "Pr√™t √† enregistrer"}
                </p>
                {(() => {
                  if (!session?.id) return null;
                  const scenarioId = session.id.replace("demo-", "");
                  const scenarioData = scenariosData[scenarioId];

                  if (scenarioData) {
                    return (
                      <div className="flex items-center space-x-2">
                        <span
                          className={`px-2 py-1 text-xs rounded-full ${
                            scenarioData.difficulte === "Facile"
                              ? "bg-green-100 text-green-700"
                              : scenarioData.difficulte === "Moyen"
                              ? "bg-yellow-100 text-yellow-700"
                              : "bg-red-100 text-red-700"
                          }`}
                        >
                          {scenarioData.difficulte}
                        </span>
                        <span className="text-xs text-gray-500">
                          ‚è±Ô∏è {scenarioData.dureeEstimee}
                        </span>
                      </div>
                    );
                  }
                  return null;
                })()}
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <Button variant="outline" onClick={handleEndSession}>
                Terminer la session
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Alert si pas de cl√© API */}
        {!hasApiKey && (
          <div className="mb-6">
            <ApiKeyAlert onOpenSettings={handleOpenSettings} />
          </div>
        )}

        {/* Interface principale ou √©cran de d√©marrage */}
        <div
          className={`bg-white rounded-lg shadow-sm border border-gray-200 h-[600px] ${
            !hasApiKey ? "opacity-75 pointer-events-none" : ""
          }`}
        >
          {!showScenarioBriefing ? (
            // √âcran de d√©marrage avec bouton pour commencer le sc√©nario
            <div className="flex flex-col items-center justify-center h-full space-y-6 p-8">
              <div className="text-center space-y-4">
                <h2 className="text-2xl font-bold text-gray-900">
                  üé≠ Sc√©nario d'entretien
                </h2>
                <p className="text-gray-600 max-w-md">
                  {messages[0]?.content ||
                    "Pr√©parez-vous √† votre simulation d'entretien. L'IA va vous pr√©senter le sc√©nario et vous pourrez commencer √† pratiquer."}
                </p>
              </div>

              <div className="space-y-4">
                <Button
                  onClick={handleStartScenarioBriefing}
                  className={`px-8 py-3 text-lg transition-all duration-200 ${
                    !hasApiKey
                      ? "bg-gray-400 text-gray-600 cursor-not-allowed"
                      : "bg-slate-600 hover:bg-slate-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105"
                  }`}
                  disabled={!hasApiKey}
                >
                  {!hasApiKey
                    ? "üîí Cl√© API requise"
                    : "üöÄ Commencer le sc√©nario"}
                </Button>

                {!hasApiKey && (
                  <div className="text-center space-y-3 p-4 bg-gray-50 rounded-lg border border-gray-200">
                    <p className="text-sm text-gray-600 font-medium">
                      ‚ö†Ô∏è Cl√© API OpenAI requise
                    </p>
                    <p className="text-xs text-gray-500">
                      Pour utiliser l'IA vocale, vous devez configurer votre cl√©
                      API OpenAI
                    </p>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleOpenSettings}
                      className="text-blue-600 border-blue-600 hover:bg-blue-50 hover:border-blue-700"
                    >
                      ‚öôÔ∏è Configurer l'API
                    </Button>
                  </div>
                )}

                {hasApiKey && (
                  <div className="text-center">
                    <p className="text-sm text-green-600 font-medium">
                      ‚úÖ Cl√© API configur√©e - Pr√™t √† commencer !
                    </p>
                  </div>
                )}
              </div>

              <div className="text-center space-y-2">
                <p className="text-sm text-gray-500">
                  üí° Conseils pour bien commencer :
                </p>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ Prenez le temps de comprendre le sc√©nario</li>
                  <li>‚Ä¢ Parlez clairement et distinctement</li>
                  <li>‚Ä¢ Vous pouvez interrompre l'IA √† tout moment</li>
                  <li>‚Ä¢ Pratiquez plusieurs fois pour vous am√©liorer</li>
                </ul>
              </div>
            </div>
          ) : (
            // Interface de chat normale une fois le briefing commenc√©
            <VoiceChatInterface
              messages={messages}
              onSendMessage={handleSendMessage}
              onStartRecording={handleStartRecording}
              onStopRecording={handleStopRecording}
              isRecording={isRecording}
              onTranscriptUpdate={handleTranscriptUpdate}
            />
          )}
        </div>
      </div>
    </>
  );
};
